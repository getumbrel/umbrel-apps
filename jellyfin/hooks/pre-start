#!/usr/bin/env bash
# This script handles version migrations for Jellyfin to ensure safe upgrades through required intermediate versions.

set -euo pipefail

APP_DIR="$(readlink -f $(dirname "${BASH_SOURCE[0]}")/..)"
APP_DATA_DIR="${APP_DIR}/data"
APP_COMPOSE_FILE="${APP_DIR}/docker-compose.yml"
JELLYFIN_SYSTEM_FILE="${APP_DATA_DIR}/config/system.xml"
JELLYFIN_UPDATE_FLAG_FILE="${APP_DATA_DIR}/POST_1_10_VERSION"
MIGRATION_IN_PROGRESS_FILE="${APP_DATA_DIR}/MIGRATION_IN_PROGRESS"

# If database files do not yet exist
# Then it's likely a new install
# Create a flag file to indicate that it is a 1.10+ version
if [[ ! -f "${JELLYFIN_SYSTEM_FILE}" ]]; then
    touch "${JELLYFIN_UPDATE_FLAG_FILE}"
fi

# Exit if flag file exists
if [[ -f "${JELLYFIN_UPDATE_FLAG_FILE}" ]]; then
    echo "Jellyfin update flag file already exists at ${JELLYFIN_UPDATE_FLAG_FILE}. Skipping migration steps."
    exit 0
fi

# Check if migration is already in progress to prevent infinite loops
if [[ -f "${MIGRATION_IN_PROGRESS_FILE}" ]]; then
    echo "Migration already in progress, exiting to prevent loops"
    exit 0
fi

# Mark migration as in progress
touch "${MIGRATION_IN_PROGRESS_FILE}"

# If no flag file exists, update to v1.10.7 first, then continue to latest version
echo "No POST_1_10_VERSION flag found - performing update to v1.10.7 and then to latest version"

# Docker images for v1.10.7 intermediate step
INTERMEDIATE_SERVER_IMAGE="linuxserver/jellyfin:10.10.7@sha256:01c9d2311eb7710867fb3a8c2718068a276cff468a71d2a2dc58a0f5165ad0d2"

# Get current images from docker-compose.yml
get_current_images_from_compose() {
    local server_image=$(yq '.services.server.image' "${APP_COMPOSE_FILE}" 2>/dev/null || echo "")
    echo "${server_image}"
}

# Update compose file with new images
update_compose_images() {
    local server_image="${1}"
    
    yq -i ".services.server.image = \"${server_image}\"" "${APP_COMPOSE_FILE}"
}

# Store original images for final step
original_images=$(get_current_images_from_compose)
original_server_image=$(echo "${original_images}" | cut -d'|' -f1)

echo "Step 1: Updating to v1.10.7 for safe migration"
update_compose_images "${INTERMEDIATE_SERVER_IMAGE}"

# Start with v1.10.7
echo "Starting Jellyfin v1.10.7..."
"${UMBREL_ROOT}/scripts/app" start jellyfin

# Wait for startup and migrations to complete
echo "Waiting for v1.10.7 to complete startup and migrations..."
sleep 90

# Stop the app
echo "Stopping Jellyfin v1.10.7..."
"${UMBREL_ROOT}/scripts/app" stop jellyfin

echo "Step 2: Updating to latest version"
update_compose_images "${original_server_image}"

# Create the flag file to prevent this migration from running again
touch "${JELLYFIN_UPDATE_FLAG_FILE}"

# Remove migration in progress file
rm -f "${MIGRATION_IN_PROGRESS_FILE}"

echo "Migration completed: v1.10.7 -> latest version"
echo "Created ${JELLYFIN_UPDATE_FLAG_FILE} flag file"
